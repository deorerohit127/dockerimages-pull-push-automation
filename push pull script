
************************************************************************
user below ref command to get the list of images from the repository

curl -s -vk -uadmin:password -XPOST "https://<repoIp>:8082/artifactory/api/search/aql" -d 'items.find({"repo":{"$match":"dockerrepo"}})'  -H "Content-Type:text/plain" | jq -r '.results[] | "\(.path)"' | rev | awk 'sub("/", "\t")' | rev | sed 's/\t/\:/g' | sort -u > imagelist.txt

*************************************************************************

use below script to pull images and create single tarboll from all the images of repo.( change the script as per the repo )

#!/bin/bash
# Set the Docker repository
DOCKER_REPO="(IP):(Port)"

# Set the tar file name
TAR_FILE=images.tar

# Create an empty file for the tar archive
touch $TAR_FILE

# Read each line from the text file and pull the Docker image
while IFS= read -r line; do
  # Check if the line starts with "IMAGE=" to ensure it's a valid line
  #if [[ $line == IMAGE=* ]]; then
    # Extract the image tag from the line
    image_tag=$(echo "$line" | cut -d= -f2)

    # Combine the repository and image tag to form the full image name
    full_image_name="${DOCKER_REPO}/${image_tag}"
    #echo "$full_image_name"

    # Extract the image tag without the first directory for the tar file
    modified_image_tag=$(echo "$image_tag" | sed 's/^[^\/]*\///')

    # Pull the Docker image
    docker pull "$full_image_name"

    # Save the image to the tar file
    docker save -o "${modified_image_tag}.tar" "$full_image_name"

    # Append the image tar file to the main tar archive
    tar --append --file=$TAR_FILE "${modified_image_tag}.tar"

    # Remove the modified  image tar file
    rm "${modified_image_tag}.tar"

#tar -Af scan.tar.gz *.tar
#  fi
done < imagelist.txt





####################################################push the image#################

now run below cmd to push images with repo refrence
sh -x dockerpushjfrog.sh "(OldRepo)(Repo)" "(NewrepoIP)(Port)" "images.tar"

**********************************************************************************

#!/bin/bash
# Set the new Docker repository
PROD_JFROG_REPO=$1
STG_JFROG_REPO=$2

# Set the tar file name
TAR_FILE=$3

# Untar the Docker images from the tar file
mkdir -p extracted_images
tar -xf $TAR_FILE -C extracted_images

# Loop through the extracted image tar files and push each image to the new repository
for image_tar in extracted_images/*.tar; do
  # Get the image tag from the tar file name
  #image_tag=$(basename "$image_tar".tar)

  # Combine the new repository and image tag to form the full new image name
  #new_full_image_name="${NEW_DOCKER_REPO}/${image_tag}"

  # Load the Docker image from the tar file
  docker load -i "$image_tar" > loaded.txt
  stg_image_tag=$(sed "s#${PROD_JFROG_REPO}#${STG_JFROG_REPO}#g" loaded.txt | cut -d':' -f2- | sed 's/ //')
  # Tag the existing image with the new repository and image tag
  old_tag=$(cat loaded.txt | cut -d':' -f2- | sed 's/ //')
  docker tag "${old_tag}" "${stg_image_tag}"

  # Push the Docker image to the new repository
  docker push "${stg_image_tag}"


  # Remove the local Docker image with the new repository and image tag
  docker rmi "${stg_image_tag}"
done
# Clean up: remove the extracted image files
  rm -rf extracted_images

echo "All Docker images pushed to the new repository: ${NEW_DOCKER_REPO}"

**********************************************************************************
